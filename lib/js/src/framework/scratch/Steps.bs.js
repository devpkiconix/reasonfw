// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var BsFluture = require("bs-fluture/lib/js/src/BsFluture.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");

function cancelTimer(timerId, param) {
  clearTimeout(timerId);
  return /* () */0;
}

function $$setTimeout$1(prim, prim$1) {
  return setTimeout(prim, prim$1);
}

function asyncIncr(data) {
  return BsFluture.make((function (_reject, resolve) {
                var timeoutId = setTimeout((function (param) {
                        return Curry._1(resolve, /* record */[/* token */data[/* token */0] + 1 | 0]);
                      }), 30);
                return /* Cancel */[(function (param) {
                            clearTimeout(timeoutId);
                            return /* () */0;
                          })];
              }));
}

function asyncDouble(data) {
  return BsFluture.make((function (_reject, resolve) {
                var timeoutId = setTimeout((function (param) {
                        return Curry._1(resolve, /* record */[/* token */(data[/* token */0] << 1)]);
                      }), 300);
                return /* Cancel */[(function (param) {
                            clearTimeout(timeoutId);
                            return /* () */0;
                          })];
              }));
}

function syncTriple(data) {
  return BsFluture.resolve(/* record */[/* token */Caml_int32.imul(data[/* token */0], 3)]);
}

exports.cancelTimer = cancelTimer;
exports.$$setTimeout = $$setTimeout$1;
exports.asyncIncr = asyncIncr;
exports.asyncDouble = asyncDouble;
exports.syncTriple = syncTriple;
/* BsFluture Not a pure module */
