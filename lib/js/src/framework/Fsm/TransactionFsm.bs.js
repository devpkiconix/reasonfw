// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Infix$Iconixfw = require("../parser/Infix.bs.js");
var Types$Iconixfw = require("../../types/Types.bs.js");
var FsmGeneric$Iconixfw = require("./FsmGeneric.bs.js");

var doNothing = Types$Iconixfw.fresolve;

function updateWorkerData(ctx, data) {
  return /* record */[
          /* dbconn */ctx[/* dbconn */0],
          /* transactionId */ctx[/* transactionId */1],
          /* data */data
        ];
}

function MakeTransaction(Db) {
  var beginWork = function (worker, data) {
    var workerCtx = data[/* data */2];
    return Infix$Iconixfw.$great$great$eq(Curry._1(worker, workerCtx), (function (resultWrkCtx) {
                  return Types$Iconixfw.fresolve(/* record */[
                              /* fsm */data[/* fsm */0],
                              /* state */data[/* state */1],
                              /* data */resultWrkCtx
                            ]);
                }));
  };
  var run = function (worker, wctx) {
    var fsm_000 = /* tuple */[
      /* Start */0,
      /* Nothing */6,
      /* Connecting */1,
      Db[/* connect */0]
    ];
    var fsm_001 = /* :: */[
      /* tuple */[
        /* Connecting */1,
        /* Connected */0,
        /* TBegin */2,
        Db[/* beginTransaction */1]
      ],
      /* :: */[
        /* tuple */[
          /* TBegin */2,
          /* Nothing */6,
          /* Working */6,
          (function (param) {
              return beginWork(worker, param);
            })
        ],
        /* :: */[
          /* tuple */[
            /* Working */6,
            /* TSuccess */2,
            /* TCommitting */3,
            Db[/* commit */2]
          ],
          /* :: */[
            /* tuple */[
              /* TCommitting */3,
              /* CommitDone */4,
              /* Done */7,
              Db[/* commitDone */3]
            ],
            /* :: */[
              /* tuple */[
                /* Working */6,
                /* TFailure */3,
                /* TRollingBack */4,
                Db[/* rollbackDone */5]
              ],
              /* :: */[
                /* tuple */[
                  /* TRollingBack */4,
                  /* RollbackDone */5,
                  /* Done */7,
                  Db[/* transactionDone */6]
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ];
    var fsm = /* :: */[
      fsm_000,
      fsm_001
    ];
    var context = /* record */[
      /* fsm */fsm,
      /* state : Start */0,
      /* data */wctx
    ];
    return Infix$Iconixfw.$great$great$eq(FsmGeneric$Iconixfw.Fsm[/* fsmExec */3](fsm, /* Start */0, /* :: */[
                      /* Nothing */6,
                      /* [] */0
                    ])(context), (function (ctx) {
                  return Types$Iconixfw.fresolve(ctx[/* data */2][/* data */2]);
                }));
  };
  return /* module */[
          /* beginWork */beginWork,
          /* run */run
        ];
}

var taplog = FsmGeneric$Iconixfw.taplog;

exports.taplog = taplog;
exports.doNothing = doNothing;
exports.updateWorkerData = updateWorkerData;
exports.MakeTransaction = MakeTransaction;
/* Infix-Iconixfw Not a pure module */
