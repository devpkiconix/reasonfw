// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Infix$Iconixfw = require("../parser/Infix.bs.js");
var Types$Iconixfw = require("../../types/Types.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function taplog(msg, x) {
  return x;
}

var doNothing = Types$Iconixfw.fresolve;

function reject(msg, _data) {
  return Types$Iconixfw.freject(msg);
}

function changeState(state, context) {
  return /* record */[
          /* fsm */context[/* fsm */0],
          /* state */state,
          /* data */context[/* data */2]
        ];
}

function fsmExec(fsm, state, events) {
  if (events) {
    var rest = events[1];
    var first = events[0];
    var transitionFinder = function (param) {
      if (param[0] === state) {
        return param[1] === first;
      } else {
        return false;
      }
    };
    var exit = 0;
    var val;
    try {
      val = List.find(transitionFinder, fsm);
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return (function (param) {
            return Types$Iconixfw.freject("Invalid input");
          });
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      var task = val[3];
      var tgt = val[2];
      var src = val[0];
      return (function (param) {
          return next(task, src, tgt, rest, fsm, param);
        });
    }
    
  } else {
    return doNothing;
  }
}

function next(task, _src, tgt, events, fsm, ctx) {
  return Infix$Iconixfw.$great$great$eq(Curry._1(task, changeState(tgt, ctx)), fsmExec(fsm, tgt, events));
}

function inject($$event, ctx) {
  return fsmExec(ctx[/* fsm */0], ctx[/* state */1], /* :: */[
                $$event,
                /* [] */0
              ])(ctx);
}

function taskRunAndInject(task, $$event, ctx) {
  return Infix$Iconixfw.$great$great$eq(Infix$Iconixfw.$less$$great(Curry._1(task, ctx), (function (param) {
                    return taplog("finished", param);
                  })), (function (param) {
                return inject($$event, param);
              }));
}

var Fsm = /* module */[
  /* doNothing */doNothing,
  /* reject */reject,
  /* changeState */changeState,
  /* fsmExec */fsmExec,
  /* next */next,
  /* inject */inject,
  /* taskRunAndInject */taskRunAndInject
];

var enableLogging = false;

exports.enableLogging = enableLogging;
exports.taplog = taplog;
exports.Fsm = Fsm;
/* Infix-Iconixfw Not a pure module */
